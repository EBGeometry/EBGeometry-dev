
name: Continuous integration

on:
  pull_request:
    branches : main
    types: [push, opened, synchronize, reopened, ready_for_review]
  push:
    branches : main

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-code-format
  cancel-in-progress: true

jobs:
  Lint-clang-format:
    name: clang-format
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        directory: [Source]

    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format
        uses: jidicula/clang-format-action@v4.10.1
        with:
          clang-format-version: '18'
          check-path: ${{ matrix.directory }}                      

  Lint-clang-tidy:
    name: clang-tidy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name:
        run: |
          sudo apt-get update
          sudo apt-get install clang-tidy
      - name: Run clang-tidy
        run: |
          clang-tidy --extra-arg=-std=c++17 Source/*.hpp

  Lint-codespell:
    name: codespell
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
        with:
          submodules: false
      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Dependencies
        run: |
          # Install Python packages
          python -m pip install --upgrade pip
          pip install codespell
      - name: Run codespell
        run: codespell          

  Linux-CPU:
    needs: [Lint-clang-tidy, Lint-clang-format, Lint-codespell]        
    name: Linux-CPU
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        comp: [g++-9, g++-10, g++-11, g++-12]

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ${{ matrix.comp }}

      - name: Install Catch2
        run: |
          git clone https://github.com/catchorg/Catch2.git
          cd Catch2
          git checkout "v3.4.0"
          mkdir build && cd build
          cmake .. -DBUILD_TESTING=Off
          make -j $(nproc)
          sudo make install        

      - name: Configure
        working-directory: ${{ matrix.directory }}
        run: |
          cmake .
          make

      - name: Run tests
        working-directory: Exec/Tests
        run: |
          ctest

  Linux-CUDA:
    needs: [Linux-CPU]
    name: Linux-CUDA
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        comp: [g++-9, g++-10, g++-11, g++-12]

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ${{ matrix.comp }}

      - name: Install Catch2
        run: |
          git clone https://github.com/catchorg/Catch2.git
          cd Catch2
          git checkout "v3.4.0"
          mkdir build && cd build
          cmake .. -DBUILD_TESTING=Off
          make -j $(nproc)
          sudo make install        

      - name: Configure
        working-directory: ${{ matrix.directory }}
        run: |
          cmake .
          make

      - name: Run tests
        working-directory: Exec/Tests
        run: |
          ctest          

  Build-documentation:
    needs: [Linux-CPU]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt install doxygen
          sudo apt install graphviz
          sudo apt install texlive
          sudo apt install texlive-latex-extra
          sudo apt install latexmk
          python3 -m pip install sphinx==5.0.0 sphinx_rtd_theme sphinxcontrib-bibtex          
          
      - name: Build doxygen
        working-directory: ${{ github.workspace }}/Docs
        run: |
          doxygen doxyfile

      - name: Build HTML documentation
        working-directory: ${{ github.workspace }}/Docs/Sphinx        
        run: |
          make html

      - name: Build PDF documentation
        working-directory: ${{ github.workspace }}/Docs/Sphinx
        run: |
          make latexpdf

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: docs
          path: Docs/Sphinx/build

      - name: Cleanup
        working-directory: ${{ github.workspace }}/Docs
        run: |
          cp -a Sphinx/build/html/* ./
          mv Sphinx/build/latex/ebgeometry.pdf ./
          rm -rf Sphinx/build

  CI-passed:
    needs: [Linux-CPU, Build-documentation]
    runs-on: ubuntu-latest
    steps:
      - name: Do nothing
        run: |
